package com.company;

import java.util.Arrays;

public class Main {

        public static void main(String[] args){

            int array[]={9,8,7,6,5,10,11,2,1,3,4};

       //     insertionSortRecursive(array, array.length);
        //    System.out.println(Arrays.toString(array));
           // bubblesort(array);
           // System.out.println(Arrays.toString(array));
//recursivebubblesort(array, array.length);
  //          System.out.println(Arrays.toString(array));
    sort(array);
            System.out.println(Arrays.toString(array));

            }

            public static void sort(int[] arr){
            if(arr.length<2)
                return;
            int middle= arr.length/2;
            int[] left=new int[middle];
            for (int i=0;i<middle;i++)
                left[i]=arr[i];
            int[] right=new int[arr.length-middle];

                for (int i=middle;i< arr.length;i++)
                    right[i-middle]=arr[i];

                sort(left);
                sort(right);
  merge(left,right,arr);
            }
            public static void merge(int[] left,int[] right,int[] result){
            int i=0,j=0,k=0;
            while (i< left.length && j< right.length){
                if(left[i]<=right[j])
                    result[k++]=left[i++];
                else
                    result[k++]=right[j++];
            }
            while (i< left.length)
                result[k++]=left[i++];
                while (j< right.length)
                    result[k++]=right[j++];


            }


            public static void recursivebubblesort(int arr[],int n){
               if(n==1)
                   return;
               for (int i=0;i<n-1;i++)
                   if(arr[i]>arr[i+1]){
                       int temp=arr[i];
                       arr[i]=arr[i+1];
                       arr[i+1]=temp;
                   }
recursivebubblesort(arr,n-1);
            }


    public static int[] insertionSort(int [] a){
            for (int i = 1; i<a.length; i++){
                int element = a[i]; //element variable contains the data we intend on bringing
                int j = i-1; // j variable points to the index position of the last value in the array
                while(j>=0 && a[j]>element){
                    a[j+1] = a[j];
                    j--;
                }
                a[j+1] = element;
            }
            return a;
    }

    public static void insertionSortRecursive(int arr[], int n)
    {
        //base case
        if (n<=1)
            return;
        //sort first n-1 elements
        insertionSortRecursive(arr,n-1);
        //insert last element at its correct position
        //in sorted array
        int last = arr[n-1];
        int j=n-2;

        /* move elements of arr[0...i-1], that are greater than key,
        to one position ahead of their current position
         */
        while(j>=0 && arr[j]>last)
        {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = last;
    }

    public static int[] bubblesort(int[] array){
            boolean swapped;
            for (int i=0;i< array.length-1;i++){
                swapped=false;
                for (int j=0;j< array.length-1;j++){
                    if(array[j]>array[j+1]){
                        int temp=array[j];
                        array[j]=array[j+1];
                        array[j+1]=temp;
                        swapped=true;
                    }
                }
                if(!swapped)
                    return array;

            }return array;
    }



}


